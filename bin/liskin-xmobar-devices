#!/usr/bin/env bash

# Indicator of powered-on devices for xmobar. This notifies me that devices
# like nvidia, touchscreen or USB camera are active so that I can disable them
# as soon as I don't need them any more.

set -eu -o pipefail
shopt -s nullglob extglob

poll_frequency=30
debounce_read_timeout=0.5
debounce_loop_timeout=5

function xmobar-proplog {
	xprop -root -f "${1:?prop}" 8u -set "$1" "${2?text}"
}

function log {
	if [[ -v last_log && "$last_log" == "$1" ]]; then return; fi
	xmobar-proplog _XMOBAR_DEVICES "$1"
	last_log="$1"
}

function find-nvidia {
	local vendor f
	if [[ -v sys_nvidia_dev ]]; then return; fi

	sys_nvidia_dev=""
	for f in /sys/bus/pci/devices/*/vendor; do
		read -r vendor <"$f"
		if [[ "$vendor" == 0x10de ]]; then
			sys_nvidia_dev=$(dirname "$f")
			return
		fi
	done
}

function check-nvidia {
	local power
	set -- /sys/module/nvidia*
	find-nvidia
	if [[ "$sys_nvidia_dev" ]]; then
		read -r power <"$sys_nvidia_dev"/power/runtime_status
		(( $# )) || [[ "$power" == active ]]
	else
		return 1
	fi
}

function check-gvt {
	set -- /sys/class/mdev_bus/*/mdev_supported_types/*/devices/*
	(( $# ))
}

function check-touchscreen {
	local name f
	for f in /sys/class/input/input*/name; do
		read -r name <"$f"
		[[ "$name" == "Raydium Corporation Raydium Touch System" ]] && return 0
	done
	return 1
}

function check-camera {
	local name interface f
	for f in /sys/class/video4linux/video*; do
		read -r name <"${f}/name" && [[ "$name" == *"Integrated Camera"* ]] && return 0
		read -r interface <"${f}/device/interface" && [[ "$interface" == *"Integrated Camera"* ]] && return 0
	done
	return 1
}

function check-vpns {
	local f

	vpns=()
	for f in /sys/devices/virtual/net/tun* /sys/devices/virtual/net/tap*; do
		f=${f##*/}
		f=${f##@(tun|tap)?(_)}
		vpns+=("$f")
	done
	(( ${#vpns[@]} ))
}

function check-sys-docker {
	# TODO: listen for changes, don't just poll
	systemctl is-active --quiet docker.service
}

function check-user-docker {
	# TODO: listen for changes, don't just poll
	systemctl --user is-active --quiet docker.service
}

function refresh {
	log=""
	check-nvidia && log="$log <fn=3>"$'\ue266'" </fn>"
	check-gvt && log="$log v<fn=3>"$'\ue266'" </fn>"
	check-touchscreen && log="$log <fn=5>"$'\uf25a'"</fn>"
	check-camera && log="$log <fn=3>"$'\uf03d'" </fn>"
	check-vpns && log="$log <fn=3>"$'\uf983'" (${vpns[*]})</fn>"
	check-sys-docker && log="$log <fn=3>"$'\uf308'" </fn>"
	check-user-docker && log="$log <fn=3>"$'\ue7b0'" </fn>"
	log "${log:+<fc=red>$log</fc>}"
}

function monitor {
	{
		echo force initial refresh
		udevadm monitor -k
	} | while :; do
		if read -r -t $poll_frequency _; then
			debounce_start=$SECONDS
			while read -r -t $debounce_read_timeout _ && (( debounce_start + debounce_loop_timeout > SECONDS )); do :; done
		elif (( $? <= 128 )); then
			break  # not a timeout, exit
		fi

		refresh
	done
}

(( $# )) || set -- monitor
"$@"
